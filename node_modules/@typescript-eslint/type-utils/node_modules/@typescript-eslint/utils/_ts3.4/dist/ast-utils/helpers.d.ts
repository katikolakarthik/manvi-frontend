import { AST_NODE_TYPES, AST_TOKEN_TYPES, TSESTree } from '../ts-estree';
export declare const isNodeOfType: <NodeType extends AST_NODE_TYPES>(nodeType: NodeType) => (node: TSESTree.Node | null | undefined) => node is Extract<TSESTree.AccessorPropertyComputedName, {
    type: NodeType;
}> | Extract<TSESTree.AccessorPropertyNonComputedName, {
    type: NodeType;
}> | Extract<TSESTree.ArrayExpression, {
    type: NodeType;
}> | Extract<TSESTree.ArrayPattern, {
    type: NodeType;
}> | Extract<TSESTree.ArrowFunctionExpression, {
    type: NodeType;
}> | Extract<TSESTree.AssignmentExpression, {
    type: NodeType;
}> | Extract<TSESTree.AssignmentPattern, {
    type: NodeType;
}> | Extract<TSESTree.AwaitExpression, {
    type: NodeType;
}> | Extract<TSESTree.BinaryExpression, {
    type: NodeType;
}> | Extract<TSESTree.BlockStatement, {
    type: NodeType;
}> | Extract<TSESTree.BreakStatement, {
    type: NodeType;
}> | Extract<TSESTree.CallExpression, {
    type: NodeType;
}> | Extract<TSESTree.CatchClause, {
    type: NodeType;
}> | Extract<TSESTree.ChainExpression, {
    type: NodeType;
}> | Extract<TSESTree.ClassBody, {
    type: NodeType;
}> | Extract<TSESTree.ClassDeclarationWithName, {
    type: NodeType;
}> | Extract<TSESTree.ClassDeclarationWithOptionalName, {
    type: NodeType;
}> | Extract<TSESTree.ClassExpression, {
    type: NodeType;
}> | Extract<TSESTree.ConditionalExpression, {
    type: NodeType;
}> | Extract<TSESTree.ContinueStatement, {
    type: NodeType;
}> | Extract<TSESTree.DebuggerStatement, {
    type: NodeType;
}> | Extract<TSESTree.Decorator, {
    type: NodeType;
}> | Extract<TSESTree.DoWhileStatement, {
    type: NodeType;
}> | Extract<TSESTree.EmptyStatement, {
    type: NodeType;
}> | Extract<TSESTree.ExportAllDeclaration, {
    type: NodeType;
}> | Extract<TSESTree.ExportDefaultDeclaration, {
    type: NodeType;
}> | Extract<TSESTree.ExportNamedDeclarationWithoutSourceWithMultiple, {
    type: NodeType;
}> | Extract<TSESTree.ExportNamedDeclarationWithoutSourceWithSingle, {
    type: NodeType;
}> | Extract<TSESTree.ExportNamedDeclarationWithSource, {
    type: NodeType;
}> | Extract<TSESTree.ExportSpecifier, {
    type: NodeType;
}> | Extract<TSESTree.ExpressionStatement, {
    type: NodeType;
}> | Extract<TSESTree.ForInStatement, {
    type: NodeType;
}> | Extract<TSESTree.ForOfStatement, {
    type: NodeType;
}> | Extract<TSESTree.ForStatement, {
    type: NodeType;
}> | Extract<TSESTree.FunctionDeclarationWithName, {
    type: NodeType;
}> | Extract<TSESTree.FunctionDeclarationWithOptionalName, {
    type: NodeType;
}> | Extract<TSESTree.FunctionExpression, {
    type: NodeType;
}> | Extract<TSESTree.Identifier, {
    type: NodeType;
}> | Extract<TSESTree.IfStatement, {
    type: NodeType;
}> | Extract<TSESTree.ImportAttribute, {
    type: NodeType;
}> | Extract<TSESTree.ImportDeclaration, {
    type: NodeType;
}> | Extract<TSESTree.ImportDefaultSpecifier, {
    type: NodeType;
}> | Extract<TSESTree.ImportExpression, {
    type: NodeType;
}> | Extract<TSESTree.ImportNamespaceSpecifier, {
    type: NodeType;
}> | Extract<TSESTree.ImportSpecifier, {
    type: NodeType;
}> | Extract<TSESTree.JSXAttribute, {
    type: NodeType;
}> | Extract<TSESTree.JSXClosingElement, {
    type: NodeType;
}> | Extract<TSESTree.JSXClosingFragment, {
    type: NodeType;
}> | Extract<TSESTree.JSXElement, {
    type: NodeType;
}> | Extract<TSESTree.JSXEmptyExpression, {
    type: NodeType;
}> | Extract<TSESTree.JSXExpressionContainer, {
    type: NodeType;
}> | Extract<TSESTree.JSXFragment, {
    type: NodeType;
}> | Extract<TSESTree.JSXIdentifier, {
    type: NodeType;
}> | Extract<TSESTree.JSXMemberExpression, {
    type: NodeType;
}> | Extract<TSESTree.JSXNamespacedName, {
    type: NodeType;
}> | Extract<TSESTree.JSXOpeningElement, {
    type: NodeType;
}> | Extract<TSESTree.JSXOpeningFragment, {
    type: NodeType;
}> | Extract<TSESTree.JSXSpreadAttribute, {
    type: NodeType;
}> | Extract<TSESTree.JSXSpreadChild, {
    type: NodeType;
}> | Extract<TSESTree.JSXText, {
    type: NodeType;
}> | Extract<TSESTree.LabeledStatement, {
    type: NodeType;
}> | Extract<TSESTree.BigIntLiteral, {
    type: NodeType;
}> | Extract<TSESTree.BooleanLiteral, {
    type: NodeType;
}> | Extract<TSESTree.NullLiteral, {
    type: NodeType;
}> | Extract<TSESTree.NumberLiteral, {
    type: NodeType;
}> | Extract<TSESTree.RegExpLiteral, {
    type: NodeType;
}> | Extract<TSESTree.StringLiteral, {
    type: NodeType;
}> | Extract<TSESTree.LogicalExpression, {
    type: NodeType;
}> | Extract<TSESTree.MemberExpressionComputedName, {
    type: NodeType;
}> | Extract<TSESTree.MemberExpressionNonComputedName, {
    type: NodeType;
}> | Extract<TSESTree.MetaProperty, {
    type: NodeType;
}> | Extract<TSESTree.MethodDefinitionComputedName, {
    type: NodeType;
}> | Extract<TSESTree.MethodDefinitionNonComputedName, {
    type: NodeType;
}> | Extract<TSESTree.NewExpression, {
    type: NodeType;
}> | Extract<TSESTree.ObjectExpression, {
    type: NodeType;
}> | Extract<TSESTree.ObjectPattern, {
    type: NodeType;
}> | Extract<TSESTree.PrivateIdentifier, {
    type: NodeType;
}> | Extract<TSESTree.Program, {
    type: NodeType;
}> | Extract<TSESTree.PropertyComputedName, {
    type: NodeType;
}> | Extract<TSESTree.PropertyNonComputedName, {
    type: NodeType;
}> | Extract<TSESTree.Prop